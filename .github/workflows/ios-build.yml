name: iOS Build and Deploy

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Capacitor iOS
      run: |
        npm install @capacitor/ios
        # iOS 플랫폼이 없을 때만 추가
        if [ ! -d "ios" ]; then
        npx cap add ios
        fi
        
    - name: Build web app
      run: npm run build
      
    - name: Copy web assets to iOS
      run: |
        npx cap copy ios
        npx cap sync ios
        
    - name: Install CocoaPods dependencies
      run: |
        cd ios/App
        pod install
        
      # - name: Setup iOS certificates
    #   env:
    #     IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
    #     IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
    #     IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
    #   run: |
    #     # 인증서 설정 스크립트
    #     echo $IOS_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
    #     echo $IOS_PROVISIONING_PROFILE_BASE64 | base64 --decode > profile.mobileprovision
    #     
    #     # 키체인에 인증서 추가
    #     security create-keychain -p "" build.keychain
    #     security import certificate.p12 -t agg -k build.keychain -P $IOS_CERTIFICATE_PASSWORD -A
    #     security list-keychains -s build.keychain
    #     security default-keychain -s build.keychain
    #     security unlock-keychain -p "" build.keychain
    #     
    #     # 프로비저닝 프로필 설치
    #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    #     cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    - name: Configure code signing
      run: |
        cd ios/App
        # Development Team 설정
        sed -i '' 's/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = "5LCBBV4KNB";/g' App.xcodeproj/project.pbxproj
        echo "Development team configured"
        
    - name: Build iOS app
      run: |
        cd ios/App
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath App.xcarchive \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   archive
                   
    - name: Export IPA
      run: |
        cd ios/App
        xcodebuild -exportArchive \
                   -archivePath App.xcarchive \
                   -exportPath . \
                   -exportOptionsPlist ../../ExportOptions.plist
                   
    - name: Upload to App Store Connect
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      run: |
        # API 키 파일 생성
        echo "$APP_STORE_CONNECT_API_KEY" > AuthKey_$APP_STORE_CONNECT_KEY_ID.p8
    
        # App Store Connect에 업로드 (새로운 방식)
        xcrun altool --upload-app \
                     --type ios \
                     --file ios/App/App.ipa \
                     --apiKey $APP_STORE_CONNECT_KEY_ID \
                     --apiIssuer $APP_STORE_CONNECT_ISSUER_ID \
                     --apiKeyPath ./AuthKey_$APP_STORE_CONNECT_KEY_ID.p8
