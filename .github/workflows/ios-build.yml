name: iOS Build and Deploy to App Store

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Capacitor iOS
      run: npm install @capacitor/ios

    - name: Build web app
      run: npm run build

    - name: Copy web assets to iOS
      run: |
        npx cap copy ios
        npx cap sync ios

    - name: Install CocoaPods dependencies
      run: |
        cd ios/App
        pod install

    - name: Setup iOS certificates and profiles
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
      run: |
        # 인증서와 프로필 파일 생성
        echo $IOS_CERTIFICATE_BASE64 | base64 --decode > certificate.cer
        echo $IOS_PROVISIONING_PROFILE_BASE64 | base64 --decode > profile.mobileprovision
        
        # 키체인 생성 및 인증서 추가
        security create-keychain -p "" build.keychain
        security import certificate.cer -k build.keychain -T /usr/bin/codesign -A
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
        # 프로비저닝 프로필 설치
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # 프로필 UUID 확인
        PROFILE_UUID=$(security cms -D -i profile.mobileprovision | plutil -extract UUID xml1 -o - - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
        echo "Profile UUID: $PROFILE_UUID"
        echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV

    - name: Build iOS Archive
      run: |
        cd ios/App
        xcodebuild -workspace App.xcworkspace \
                   -scheme App \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath App.xcarchive \
                   CODE_SIGN_STYLE=Manual \
                   DEVELOPMENT_TEAM=5LCBBV4KNB \
                   CODE_SIGN_IDENTITY="Apple Distribution" \
                   PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
                   archive

    - name: Export IPA for App Store
      run: |
        cd ios/App
        xcodebuild -exportArchive \
                   -archivePath App.xcarchive \
                   -exportPath . \
                   -exportOptionsPlist ../../ExportOptions.plist

    - name: Upload to App Store Connect
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      run: |
        # API 키 파일 생성
        echo "$APP_STORE_CONNECT_API_KEY" > AuthKey_$APP_STORE_CONNECT_KEY_ID.p8
        
        # App Store Connect에 업로드
        xcrun altool --upload-app \
                     --type ios \
                     --file ios/App/App.ipa \
                     --apiKey $APP_STORE_CONNECT_KEY_ID \
                     --apiIssuer $APP_STORE_CONNECT_ISSUER_ID \
                     --apiKeyPath ./AuthKey_$APP_STORE_CONNECT_KEY_ID.p8

    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-signed
        path: ios/App/App.ipa
        retention-days: 30
